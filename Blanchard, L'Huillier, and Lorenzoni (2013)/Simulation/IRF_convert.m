% Compute the IRFs of original model using IRFs of the equivalent full
% information model 

clc
clear all

% Run Dynare to generate IRFs
dynare simulate.mod

load IRF_matrix               % load IRFs of EFI model, generated by Dynare
                              % shocks e1-e2 must be ordered first
T = size(IRF_matrix,1);       % length of IRF
n_shock = size(IRF_matrix,2); % number of shocks
n_var = size(IRF_matrix,3);   % number of variables
T_plot = 20;

IRF = zeros(T,n_shock+1,n_var);
IRF(:,4:n_shock+1,1:n_var) = IRF_matrix(:,3:n_shock,1:n_var);

% Load parameter values from M_.params and assign them to variables
param_names = cellstr(M_.param_names); % Get the parameter names from M_.param_names
param_values = M_.params; % Get the parameter values from M_.params

% Assign the parameters their values
for k = 1:length(param_names)
    assignin('base', param_names{k}, param_values(k));
end

% form transition matrices and solves filtering problem
A = [ 1+rho -rho 0 ; 1 0 0 ; 0 0 rho ];
S_1 = [ (1-rho)*sig_u 0 0 ; 0 0 0 ; 0 0 (rho^.5)*sig_u ]^2;
F = [ 1 0 1 ; 1 0 0 ];
S_2 = [0 0; 0 sig_nu]^2;

P = .01*eye(3,3);
K = P*F'/(F*P*F' + S_2);
for iter = 1:10000;
    P = A*(P-K*F*P)*A' + S_1;
    Ki = P*F'/(F*P*F' + S_2);  
    dif = max(max(abs(Ki-K))); K = Ki;
    if dif<1e-15
        break
    end
end;

% computes transitions for expected values
IKFA = (eye(3,3) - K*F)*A;
FA = F*A;
C = real((F*P*F'+S_2)^.5);
B = K*C;

% compute IRF to original shocks

for i = 1:n_var

Z_e = IRF_matrix(:,1:2,i); % select responses to e1-e2
Z_u = zeros(T,2);

X = zeros(3,T); Xh = X; 
Y = zeros(2,T); V = Y;
e = zeros(2,T);

for shock = 1:3
    if shock == 1    
        U1 = [(1-rho)*sig_u 0 0]'; U2 = [0 0]'; 
    elseif shock == 2
        U1 = [0 0 (rho^.5)*sig_u ]'; U2 = [0 0]'; 
    elseif shock == 3
        U1 = [0 0 0]'; U2 = [0 sig_nu]'; 
    end

    % compute impulse responses 
    X(:,1) = U1;
    Y(:,1) = F*X(:,1) + U2;
    Xh(:,1) = K*Y(:,1);
    % gets innovations
    V(:,1) = Y(:,1);
    e(:,1) = C\V(:,1);
    Z_u(1,shock) = Z_e(1,:)*e(:,1);

    for t = 2:T;
        % update
        X(:,t) = A*X(:,t-1);
        Y(:,t) = F*X(:,t);
        Xh(:,t) = A*Xh(:,t-1) + K*(Y(:,t)-F*A*Xh(:,t-1));
        V(:,t) = Y(:,t)-F*A*Xh(:,t-1);
        e(:,t) = C\V(:,t);
        yy = 0;
        for l=1:t % this is the convolution step
            yy = yy + Z_e(l,:)*e(:,t+1-l);
        end
        Z_u(t,shock) = yy;
    end 
        
end

IRF(:,1:3,i) = Z_u;
end

%% Plot IRFs to noise shock

% Define the variables to plot and the number of shocks
variables_to_plot = {'ca', 'ia', 'ya', 'n'};
n_shocks = 3; % Number of shocks (e_1, e_2, news shock)
figure;
plot_index = 1;
T_plot = 20; % Ensure this matches the IRF length in estimation

% Define row labels and their vertical positions
row_labels = {'Permanent tech.', 'Transitory tech.', 'Noise'};
row_label_offsets = [0.25, 0.4, 0.5]; % Adjust these values to set the vertical position of each label

% Loop through each shock and each variable to plot the IRFs
for shock = 1:n_shocks
    for i = 1:length(variables_to_plot)
        var_name = variables_to_plot{i};
        var_index = find(strcmp(var_names, var_name));
        if ~isempty(var_index)
            subplot(n_shocks, length(variables_to_plot), plot_index);
            plot(1:T_plot, IRF(1:T_plot, shock, var_index), 'b-', 'LineWidth', 1);
            if shock == 1
                title(M_.endo_names_long(strmatch(var_name, M_.endo_names, 'exact'), :));
            end
            hold on;
            plot_index = plot_index + 1;
        end
    end
    % Add row label
    % Select the first subplot in the current row
    subplot(n_shocks, length(variables_to_plot), (shock-1)*length(variables_to_plot) + 1);
    % Add the text label outside the plot area
    ax = gca;
    yl = ylim;
    text(ax.Position(1) - 0.4, mean(yl) + row_label_offsets(shock), row_labels{shock}, 'FontSize', 10, 'HorizontalAlignment', 'center', 'Rotation', 90, 'Units', 'normalized');
end

set(gcf, 'Color', 'w');


% Define the variables to plot and the number of shocks
variables_to_plot = {'r', 'pi', 'wa'};
n_shocks = 3; % Number of shocks (e_1, e_2, news shock)
figure;
plot_index = 1;
T_plot = 20; % Ensure this matches the IRF length in estimation

% Define row labels and their vertical positions
row_labels = {'Permanent tech.', 'Transitory tech.', 'Noise'};
row_label_offsets = [0.5, 0.5, 0.5]; % Adjust these values to set the vertical position of each label

% Loop through each shock and each variable to plot the IRFs
for shock = 1:n_shocks
    for i = 1:length(variables_to_plot)
        var_name = variables_to_plot{i};
        var_index = find(strcmp(var_names, var_name));
        if ~isempty(var_index)
            subplot(n_shocks, length(variables_to_plot), plot_index);
            plot(1:T_plot, IRF(1:T_plot, shock, var_index), 'b-', 'LineWidth', 1);
            if shock == 1
                title(M_.endo_names_long(strmatch(var_name, M_.endo_names, 'exact'), :));
            end
            hold on;
            plot_index = plot_index + 1;
        end
    end
    % Add row label
    % Select the first subplot in the current row
    subplot(n_shocks, length(variables_to_plot), (shock-1)*length(variables_to_plot) + 1);
    % Add the text label outside the plot area
    ax = gca;
    yl = ylim;
    text(ax.Position(1) - 0.35, mean(yl) + row_label_offsets(shock), row_labels{shock}, 'FontSize', 10, 'HorizontalAlignment', 'center', 'Rotation', 90, 'Units', 'normalized');
end

set(gcf, 'Color', 'w');